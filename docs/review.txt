===========================================
eZ-Publish JavaScript REST-Prototype Review
===========================================

:Author:   Jakob Westhoff
:State:    Completed
:Date:     2013-12-13

.. contents:: Table of contents

General Remarks
===============

Implementation
--------------

- If jshint warnings are disabled somewhere a comment should always be added
  explaining, which warning is disabled and why it is legal for the given code
  block.

  - Example: ``src/ConnectionManager.js``

    - Instead of disabling ``boss`` simply surround the assignment with another pair
      of parenthesis: ``while ((nextRequest = that._requestsQueue.shift())) {``

    - The other warning is "Don't create functions in a loop"
        
        - In this case it is an indicator that the code might profit from
          extraction of the function. There is no real reason to create one
          over and over again. If there is mark it in an explicit comment.

- Maybe the `getXXXService` functions should be refactored to be registered in
  a generic manner. That would allow the easier integration of an Extension-API
  in the future. It may however be done, once this Extension-API is needed.


Tests
-----

- Test should never output something

  - **FIXED**: *request-logging-tests* were outputting their log contents
  - **FIXED**: *PromiseCAPI* tests were outputting the rejectiontracking info of Q

- Some of the tests rely on internal API (internal properties and Stuff)
  
    - Usually this should not be done, as it makes refactoring a lot harder
    - In most situations the public API of the components should be tested, as
      that is what is used later on anyways.
    - If internal properties are accessed anywhere it should always be
      documented why this decission has been made.

- Maybe the test files should be structured into the same directories as the
  source files::

    tests/
    tests/authAgents/
    tests/authAgents/SessionAuthAgent.tests.js
    ...

- Usually jasmine test files are called ``*.spec.js`` not ``*.tests.js``. But
  that's just a convention. No functional problems exist with a different
  naming scheme.

- A lot of tests are doing too much in one test (expectation) and should be
  split up into multiple test functions

  - Example (**FIXED**): ``CAPI:: is calling services correctly (and they are singletons)::: ContentTypeService:``

    - **FIXED**: should be two tests: correct calling + singleton behaviour

- The naming of tests is still a little bit off

    - **Describe** blocks should always be named after a certain part of the
      API/Featureset/$whatever (eg. API, Storage, Singleton Behaviour, ...)

    - **It** blocks should describe a certain expectation of the described part
      of the system (eg. "should store data under given key", "should create
      only one service", ...)

    - Even though the naming is not critical for the execution of the tests, it
      massively helps finding tests if they fail. Furthermore if those style guide
      for naming is followed the tests are automatically better structured.

- If variables are only needed inside a certain ``it`` or ``describe`` block,
  they should be declared in there, instead on a higher level

  - Example (**FIXED**): ``CAPI.tests.js``

Detail Remarks
==============

``src/structures/ViewCreateStruct.js``
--------------------------------------

- **FIXED**: Usage of reserved keyword ``public``.

``connectionManager.js``
------------------------

- As described by the Raw Request Interface section of the design only the
  headerspart of the ``ConnectionManager#request`` method should be optional.
  Every other argument is supposed to be mandatory

    - After a further look it might make sense to declare the ``bodyObject`` property optional as well.
    - An alternative would be to directly pass the ``Request`` object to the
      function instead of single parameters

      - This would of course break the current api and will cause major
        refactoring work

- Stated in the same section is the possibility to create further methods as
  shortcuts for often used requests. This should be used to define more
  appropriate methods for really needed cases.

    - I still think this should be done, as I don't see the need for the
      request method to have all those optional arguments

    - If you want to keep the API exactly as it is in order to not change the
      calls using it, please update the ``design.txt`` accordingly

- Line 84: Use a guard clause to reduce the nesting level by one :)

- The handling of optional arguments should be refactored/extracted in the case
  of the ``request`` and ``notAuthorizedRequest`` methods, as it is identical.

    - Furthermore the functions would profit from being smaller

``CAPI.js``
-----------

- **FIXED**: Don't mix complex initializations (``defaultOptions``) with variable
  declarations

- **FIXED**: Service singletons are stored inside an object property (prefixed with
  underscore).

  - As the CAPI is the external API entrypoint everything private should really
    be private in order to minimize manipulation from the "outside" world.

    - The stored services should therefore be scope private variables

- `connectionStack` should not be available to the outside world using a config
  in my opinion

  - Has this debugging reasons?
  - Testing reasons?

    - Inject another Connection Feature factory

  - I wasn't able to find a real reason for it. If there is none. Simply remove
    it please

``PromiseCAPI.js``
------------------

- **FIXED**: ``this._services`` as well as ``this._getPromiseService`` should be
  really private. (See ``CAPI.js`` review notes for reasons)

- **FIXED**: non ``getXXXService`` should be copied over as well (while not being
  transformed to a promise version of course. They should be synchronous)

``PromiseService.js``
---------------------

- **FIXED**: ``this._generatePromiseFunction`` should be really  private. (See
  ``CAPI.js`` review notes for reasons)
- **FIXED**: ``newXXXStruct`` functions should be copied over as well


``SessionAuthAgent.js``
-----------------------

- TODO: Use ``DiscoveryService`` instead of hardcoded session path (Already
  marked as a todo)

    - In order to do that the ``DiscoveryService`` needs to be injected by the
      CAPI as well. (Should be done using an explicit setter as well).

    - I am not even 100% sure, why the ``createSession`` method of the
      ``UserService`` is taking the url as an argument, as it should discover
      that one on its own, as its identifying the entrypoint, not a special
      ressource.

      - I think this is point, which should be changed/adapted to solve the
        problem (instead of injecting the DiscoveryService to into the
        AuthAgent)

- **FIXED**: Proper PersistentStorage abstraction needs to be created:

    - **FIXED**: For now a simple key/value storage wrapper (get/set) around the
      sessionStorage would suffice. It should be possible to provide a storage
      implementation during construction. If none is given a default could be
      created (SessionStorage). Another solution would be to use some sort of
      NoopStorage by default, which does not store anything, as e.g. single
      page webapplications do not need such a storage. (To adhere to the API it
      could be a MemoryStorage which simply holds the information in memory)

- **FIXED**: Half of the ``SessionAuthAgent`` tests did not really test the correct
  behaviour, as the Browser based ``sessionStorage`` can not be overwritten the
  way it has been done (Mind the scoping). With the switch to the Storage
  abstraction I implemented, I fixed the tests to really do their job

- **FIXED**: Line: 76-78: Replaced by a guard clause

``Response.js``
---------------

- **FIXED**: ``JSON.parse`` should be wrapped in try catch (The received result may
  not be json at all)

``structures/*.js``
-------------------

- I would tend to create a simple ``extend`` utility function, which simply
  iterates own properties of a given object and extends a target object with
  them. This would allow to utilize proper prototypial inheritance, while still
  having a nicer syntax::

    var CreateStruct = function(contentTypeId, locationCreateStruct, languageCo de, user) {
        var now = new Date();
        this.body = {}; 
        this.headers = {};

        extend(this.body, { 
            "ContentCreate": {
                "ContentType": {
                    "_href" : contentTypeId
                },
                "mainLanguageCode": languageCode,
                "LocationCreate" : locationCreateStruct.LocationCreate,
                "Section" : null,
                "User" : user,
                "alwaysAvailable" : "true",
                "remoteId" : null,
                "modificationDate": now.format("isoDateTime"),
                "fields": {
                    "field": []
                }
            }
        });
    };

- I vaguely remember a mail conversation about this topic, but wasn't able to
  find it anymore. Therefore I don't know if it was decided for or against this
  syntactical approach.

- As it is a purely syntactical issue (which however in my opinion allows for
  easier maintainability) it must not be fixed, but would be a nice to have

    - **FIXED**: The corresponding ``extend`` function should however be
      implemented anyways, as can be used everywhere in the code where
      ``for(key in ...) ... hasOwnProperty...`` constructs come into play

- I implemented the ``extend`` function and used it throughout the code. If it
  is used for the struct definitions like it is described above is up to you.

``DiscoveryService.js``
-----------------------

- **FIXED**: Properties in constructor should be private

``connections/*.js``
--------------------

- **FIXED**: Both curent ``Connection`` implementations should use prototypical
  inheritance instead of constructor based inheritance (defining methods inside
  the constructor)

  - For the CAPI and PromiseCAPI we used this technique as they are part of the
    public API of the library and should be as robust and isolated as possible.
    For an internal component like the ``Connections`` there is no reason to
    prioritize information hiding over memory and cpu consumption.

